// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock_storage is a generated GoMock package.
package mocks

import (
	context "context"
	modelstorage "dk-go-gophkeeper/internal/server/storage/modelstorage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBatchDeleter is a mock of BatchDeleter interface.
type MockBatchDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockBatchDeleterMockRecorder
}

// MockBatchDeleterMockRecorder is the mock recorder for MockBatchDeleter.
type MockBatchDeleterMockRecorder struct {
	mock *MockBatchDeleter
}

// NewMockBatchDeleter creates a new mock instance.
func NewMockBatchDeleter(ctrl *gomock.Controller) *MockBatchDeleter {
	mock := &MockBatchDeleter{ctrl: ctrl}
	mock.recorder = &MockBatchDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchDeleter) EXPECT() *MockBatchDeleterMockRecorder {
	return m.recorder
}

// DeleteBatch mocks base method.
func (m *MockBatchDeleter) DeleteBatch(ctx context.Context, identifiers []string, userID, db string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, identifiers, userID, db)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockBatchDeleterMockRecorder) DeleteBatch(ctx, identifiers, userID, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockBatchDeleter)(nil).DeleteBatch), ctx, identifiers, userID, db)
}

// Flush mocks base method.
func (m *MockBatchDeleter) Flush(ctx context.Context, batch []modelstorage.Removal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockBatchDeleterMockRecorder) Flush(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockBatchDeleter)(nil).Flush), ctx, batch)
}

// SendToQueue mocks base method.
func (m *MockBatchDeleter) SendToQueue(item modelstorage.Removal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendToQueue", item)
}

// SendToQueue indicates an expected call of SendToQueue.
func (mr *MockBatchDeleterMockRecorder) SendToQueue(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToQueue", reflect.TypeOf((*MockBatchDeleter)(nil).SendToQueue), item)
}

// MockStorageAuthorizer is a mock of StorageAuthorizer interface.
type MockStorageAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAuthorizerMockRecorder
}

// MockStorageAuthorizerMockRecorder is the mock recorder for MockStorageAuthorizer.
type MockStorageAuthorizerMockRecorder struct {
	mock *MockStorageAuthorizer
}

// NewMockStorageAuthorizer creates a new mock instance.
func NewMockStorageAuthorizer(ctrl *gomock.Controller) *MockStorageAuthorizer {
	mock := &MockStorageAuthorizer{ctrl: ctrl}
	mock.recorder = &MockStorageAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAuthorizer) EXPECT() *MockStorageAuthorizerMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method.
func (m *MockStorageAuthorizer) AddNewUser(ctx context.Context, login, password, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", ctx, login, password, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockStorageAuthorizerMockRecorder) AddNewUser(ctx, login, password, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockStorageAuthorizer)(nil).AddNewUser), ctx, login, password, userID)
}

// CheckUser mocks base method.
func (m *MockStorageAuthorizer) CheckUser(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockStorageAuthorizerMockRecorder) CheckUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockStorageAuthorizer)(nil).CheckUser), ctx, login, password)
}

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetBankCardData mocks base method.
func (m *MockGetter) GetBankCardData(ctx context.Context, userID string) ([]modelstorage.BankCardStorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCardData", ctx, userID)
	ret0, _ := ret[0].([]modelstorage.BankCardStorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardData indicates an expected call of GetBankCardData.
func (mr *MockGetterMockRecorder) GetBankCardData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardData", reflect.TypeOf((*MockGetter)(nil).GetBankCardData), ctx, userID)
}

// GetLoginPasswordData mocks base method.
func (m *MockGetter) GetLoginPasswordData(ctx context.Context, userID string) ([]modelstorage.LoginPasswordStorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginPasswordData", ctx, userID)
	ret0, _ := ret[0].([]modelstorage.LoginPasswordStorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginPasswordData indicates an expected call of GetLoginPasswordData.
func (mr *MockGetterMockRecorder) GetLoginPasswordData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginPasswordData", reflect.TypeOf((*MockGetter)(nil).GetLoginPasswordData), ctx, userID)
}

// GetTextBinaryData mocks base method.
func (m *MockGetter) GetTextBinaryData(ctx context.Context, userID string) ([]modelstorage.TextBinaryStorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextBinaryData", ctx, userID)
	ret0, _ := ret[0].([]modelstorage.TextBinaryStorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextBinaryData indicates an expected call of GetTextBinaryData.
func (mr *MockGetterMockRecorder) GetTextBinaryData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextBinaryData", reflect.TypeOf((*MockGetter)(nil).GetTextBinaryData), ctx, userID)
}

// MockSetter is a mock of Setter interface.
type MockSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSetterMockRecorder
}

// MockSetterMockRecorder is the mock recorder for MockSetter.
type MockSetterMockRecorder struct {
	mock *MockSetter
}

// NewMockSetter creates a new mock instance.
func NewMockSetter(ctrl *gomock.Controller) *MockSetter {
	mock := &MockSetter{ctrl: ctrl}
	mock.recorder = &MockSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetter) EXPECT() *MockSetterMockRecorder {
	return m.recorder
}

// SetBankCardData mocks base method.
func (m *MockSetter) SetBankCardData(ctx context.Context, userID, identifier, number, holder, cvv, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBankCardData", ctx, userID, identifier, number, holder, cvv, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBankCardData indicates an expected call of SetBankCardData.
func (mr *MockSetterMockRecorder) SetBankCardData(ctx, userID, identifier, number, holder, cvv, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBankCardData", reflect.TypeOf((*MockSetter)(nil).SetBankCardData), ctx, userID, identifier, number, holder, cvv, meta)
}

// SetLoginPasswordData mocks base method.
func (m *MockSetter) SetLoginPasswordData(ctx context.Context, userID, identifier, login, password, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoginPasswordData", ctx, userID, identifier, login, password, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLoginPasswordData indicates an expected call of SetLoginPasswordData.
func (mr *MockSetterMockRecorder) SetLoginPasswordData(ctx, userID, identifier, login, password, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoginPasswordData", reflect.TypeOf((*MockSetter)(nil).SetLoginPasswordData), ctx, userID, identifier, login, password, meta)
}

// SetTextBinaryData mocks base method.
func (m *MockSetter) SetTextBinaryData(ctx context.Context, userID, identifier, entry, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTextBinaryData", ctx, userID, identifier, entry, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTextBinaryData indicates an expected call of SetTextBinaryData.
func (mr *MockSetterMockRecorder) SetTextBinaryData(ctx, userID, identifier, entry, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTextBinaryData", reflect.TypeOf((*MockSetter)(nil).SetTextBinaryData), ctx, userID, identifier, entry, meta)
}

// MockDataStorage is a mock of DataStorage interface.
type MockDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorageMockRecorder
}

// MockDataStorageMockRecorder is the mock recorder for MockDataStorage.
type MockDataStorageMockRecorder struct {
	mock *MockDataStorage
}

// NewMockDataStorage creates a new mock instance.
func NewMockDataStorage(ctrl *gomock.Controller) *MockDataStorage {
	mock := &MockDataStorage{ctrl: ctrl}
	mock.recorder = &MockDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStorage) EXPECT() *MockDataStorageMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method.
func (m *MockDataStorage) AddNewUser(ctx context.Context, login, password, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", ctx, login, password, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockDataStorageMockRecorder) AddNewUser(ctx, login, password, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockDataStorage)(nil).AddNewUser), ctx, login, password, userID)
}

// CheckUser mocks base method.
func (m *MockDataStorage) CheckUser(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockDataStorageMockRecorder) CheckUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockDataStorage)(nil).CheckUser), ctx, login, password)
}

// DeleteBatch mocks base method.
func (m *MockDataStorage) DeleteBatch(ctx context.Context, identifiers []string, userID, db string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, identifiers, userID, db)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockDataStorageMockRecorder) DeleteBatch(ctx, identifiers, userID, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockDataStorage)(nil).DeleteBatch), ctx, identifiers, userID, db)
}

// Flush mocks base method.
func (m *MockDataStorage) Flush(ctx context.Context, batch []modelstorage.Removal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockDataStorageMockRecorder) Flush(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockDataStorage)(nil).Flush), ctx, batch)
}

// GetBankCardData mocks base method.
func (m *MockDataStorage) GetBankCardData(ctx context.Context, userID string) ([]modelstorage.BankCardStorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCardData", ctx, userID)
	ret0, _ := ret[0].([]modelstorage.BankCardStorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardData indicates an expected call of GetBankCardData.
func (mr *MockDataStorageMockRecorder) GetBankCardData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardData", reflect.TypeOf((*MockDataStorage)(nil).GetBankCardData), ctx, userID)
}

// GetLoginPasswordData mocks base method.
func (m *MockDataStorage) GetLoginPasswordData(ctx context.Context, userID string) ([]modelstorage.LoginPasswordStorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginPasswordData", ctx, userID)
	ret0, _ := ret[0].([]modelstorage.LoginPasswordStorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginPasswordData indicates an expected call of GetLoginPasswordData.
func (mr *MockDataStorageMockRecorder) GetLoginPasswordData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginPasswordData", reflect.TypeOf((*MockDataStorage)(nil).GetLoginPasswordData), ctx, userID)
}

// GetTextBinaryData mocks base method.
func (m *MockDataStorage) GetTextBinaryData(ctx context.Context, userID string) ([]modelstorage.TextBinaryStorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextBinaryData", ctx, userID)
	ret0, _ := ret[0].([]modelstorage.TextBinaryStorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextBinaryData indicates an expected call of GetTextBinaryData.
func (mr *MockDataStorageMockRecorder) GetTextBinaryData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextBinaryData", reflect.TypeOf((*MockDataStorage)(nil).GetTextBinaryData), ctx, userID)
}

// SendToQueue mocks base method.
func (m *MockDataStorage) SendToQueue(item modelstorage.Removal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendToQueue", item)
}

// SendToQueue indicates an expected call of SendToQueue.
func (mr *MockDataStorageMockRecorder) SendToQueue(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToQueue", reflect.TypeOf((*MockDataStorage)(nil).SendToQueue), item)
}

// SetBankCardData mocks base method.
func (m *MockDataStorage) SetBankCardData(ctx context.Context, userID, identifier, number, holder, cvv, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBankCardData", ctx, userID, identifier, number, holder, cvv, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBankCardData indicates an expected call of SetBankCardData.
func (mr *MockDataStorageMockRecorder) SetBankCardData(ctx, userID, identifier, number, holder, cvv, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBankCardData", reflect.TypeOf((*MockDataStorage)(nil).SetBankCardData), ctx, userID, identifier, number, holder, cvv, meta)
}

// SetLoginPasswordData mocks base method.
func (m *MockDataStorage) SetLoginPasswordData(ctx context.Context, userID, identifier, login, password, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoginPasswordData", ctx, userID, identifier, login, password, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLoginPasswordData indicates an expected call of SetLoginPasswordData.
func (mr *MockDataStorageMockRecorder) SetLoginPasswordData(ctx, userID, identifier, login, password, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoginPasswordData", reflect.TypeOf((*MockDataStorage)(nil).SetLoginPasswordData), ctx, userID, identifier, login, password, meta)
}

// SetTextBinaryData mocks base method.
func (m *MockDataStorage) SetTextBinaryData(ctx context.Context, userID, identifier, entry, meta string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTextBinaryData", ctx, userID, identifier, entry, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTextBinaryData indicates an expected call of SetTextBinaryData.
func (mr *MockDataStorageMockRecorder) SetTextBinaryData(ctx, userID, identifier, entry, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTextBinaryData", reflect.TypeOf((*MockDataStorage)(nil).SetTextBinaryData), ctx, userID, identifier, entry, meta)
}
