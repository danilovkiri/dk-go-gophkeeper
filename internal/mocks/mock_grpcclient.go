// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock_grpcclient is a generated GoMock package.
package mock_grpcclient

import (
	modelstorage "dk-go-gophkeeper/internal/client/storage/modelstorage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	codes "google.golang.org/grpc/codes"
)

// MockTextsBinariesGetter is a mock of TextsBinariesGetter interface.
type MockTextsBinariesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTextsBinariesGetterMockRecorder
}

// MockTextsBinariesGetterMockRecorder is the mock recorder for MockTextsBinariesGetter.
type MockTextsBinariesGetterMockRecorder struct {
	mock *MockTextsBinariesGetter
}

// NewMockTextsBinariesGetter creates a new mock instance.
func NewMockTextsBinariesGetter(ctrl *gomock.Controller) *MockTextsBinariesGetter {
	mock := &MockTextsBinariesGetter{ctrl: ctrl}
	mock.recorder = &MockTextsBinariesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextsBinariesGetter) EXPECT() *MockTextsBinariesGetterMockRecorder {
	return m.recorder
}

// GetTextsBinaries mocks base method.
func (m *MockTextsBinariesGetter) GetTextsBinaries() (map[string]modelstorage.TextOrBinary, codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextsBinaries")
	ret0, _ := ret[0].(map[string]modelstorage.TextOrBinary)
	ret1, _ := ret[1].(codes.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTextsBinaries indicates an expected call of GetTextsBinaries.
func (mr *MockTextsBinariesGetterMockRecorder) GetTextsBinaries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextsBinaries", reflect.TypeOf((*MockTextsBinariesGetter)(nil).GetTextsBinaries))
}

// MockLoginsPasswordsGetter is a mock of LoginsPasswordsGetter interface.
type MockLoginsPasswordsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockLoginsPasswordsGetterMockRecorder
}

// MockLoginsPasswordsGetterMockRecorder is the mock recorder for MockLoginsPasswordsGetter.
type MockLoginsPasswordsGetterMockRecorder struct {
	mock *MockLoginsPasswordsGetter
}

// NewMockLoginsPasswordsGetter creates a new mock instance.
func NewMockLoginsPasswordsGetter(ctrl *gomock.Controller) *MockLoginsPasswordsGetter {
	mock := &MockLoginsPasswordsGetter{ctrl: ctrl}
	mock.recorder = &MockLoginsPasswordsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginsPasswordsGetter) EXPECT() *MockLoginsPasswordsGetterMockRecorder {
	return m.recorder
}

// GetLoginsPasswords mocks base method.
func (m *MockLoginsPasswordsGetter) GetLoginsPasswords() (map[string]modelstorage.LoginAndPassword, codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginsPasswords")
	ret0, _ := ret[0].(map[string]modelstorage.LoginAndPassword)
	ret1, _ := ret[1].(codes.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoginsPasswords indicates an expected call of GetLoginsPasswords.
func (mr *MockLoginsPasswordsGetterMockRecorder) GetLoginsPasswords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginsPasswords", reflect.TypeOf((*MockLoginsPasswordsGetter)(nil).GetLoginsPasswords))
}

// MockBankCardsGetter is a mock of BankCardsGetter interface.
type MockBankCardsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockBankCardsGetterMockRecorder
}

// MockBankCardsGetterMockRecorder is the mock recorder for MockBankCardsGetter.
type MockBankCardsGetterMockRecorder struct {
	mock *MockBankCardsGetter
}

// NewMockBankCardsGetter creates a new mock instance.
func NewMockBankCardsGetter(ctrl *gomock.Controller) *MockBankCardsGetter {
	mock := &MockBankCardsGetter{ctrl: ctrl}
	mock.recorder = &MockBankCardsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankCardsGetter) EXPECT() *MockBankCardsGetterMockRecorder {
	return m.recorder
}

// GetBankCards mocks base method.
func (m *MockBankCardsGetter) GetBankCards() (map[string]modelstorage.BankCard, codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCards")
	ret0, _ := ret[0].(map[string]modelstorage.BankCard)
	ret1, _ := ret[1].(codes.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBankCards indicates an expected call of GetBankCards.
func (mr *MockBankCardsGetterMockRecorder) GetBankCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCards", reflect.TypeOf((*MockBankCardsGetter)(nil).GetBankCards))
}

// MockBankCardSender is a mock of BankCardSender interface.
type MockBankCardSender struct {
	ctrl     *gomock.Controller
	recorder *MockBankCardSenderMockRecorder
}

// MockBankCardSenderMockRecorder is the mock recorder for MockBankCardSender.
type MockBankCardSenderMockRecorder struct {
	mock *MockBankCardSender
}

// NewMockBankCardSender creates a new mock instance.
func NewMockBankCardSender(ctrl *gomock.Controller) *MockBankCardSender {
	mock := &MockBankCardSender{ctrl: ctrl}
	mock.recorder = &MockBankCardSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankCardSender) EXPECT() *MockBankCardSenderMockRecorder {
	return m.recorder
}

// SendBankCard mocks base method.
func (m *MockBankCardSender) SendBankCard(arg0 modelstorage.BankCard) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBankCard", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBankCard indicates an expected call of SendBankCard.
func (mr *MockBankCardSenderMockRecorder) SendBankCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBankCard", reflect.TypeOf((*MockBankCardSender)(nil).SendBankCard), arg0)
}

// MockLoginPasswordSender is a mock of LoginPasswordSender interface.
type MockLoginPasswordSender struct {
	ctrl     *gomock.Controller
	recorder *MockLoginPasswordSenderMockRecorder
}

// MockLoginPasswordSenderMockRecorder is the mock recorder for MockLoginPasswordSender.
type MockLoginPasswordSenderMockRecorder struct {
	mock *MockLoginPasswordSender
}

// NewMockLoginPasswordSender creates a new mock instance.
func NewMockLoginPasswordSender(ctrl *gomock.Controller) *MockLoginPasswordSender {
	mock := &MockLoginPasswordSender{ctrl: ctrl}
	mock.recorder = &MockLoginPasswordSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginPasswordSender) EXPECT() *MockLoginPasswordSenderMockRecorder {
	return m.recorder
}

// SendLoginPassword mocks base method.
func (m *MockLoginPasswordSender) SendLoginPassword(arg0 modelstorage.LoginAndPassword) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginPassword", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLoginPassword indicates an expected call of SendLoginPassword.
func (mr *MockLoginPasswordSenderMockRecorder) SendLoginPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginPassword", reflect.TypeOf((*MockLoginPasswordSender)(nil).SendLoginPassword), arg0)
}

// MockTextBinarySender is a mock of TextBinarySender interface.
type MockTextBinarySender struct {
	ctrl     *gomock.Controller
	recorder *MockTextBinarySenderMockRecorder
}

// MockTextBinarySenderMockRecorder is the mock recorder for MockTextBinarySender.
type MockTextBinarySenderMockRecorder struct {
	mock *MockTextBinarySender
}

// NewMockTextBinarySender creates a new mock instance.
func NewMockTextBinarySender(ctrl *gomock.Controller) *MockTextBinarySender {
	mock := &MockTextBinarySender{ctrl: ctrl}
	mock.recorder = &MockTextBinarySenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextBinarySender) EXPECT() *MockTextBinarySenderMockRecorder {
	return m.recorder
}

// SendTextBinary mocks base method.
func (m *MockTextBinarySender) SendTextBinary(arg0 modelstorage.TextOrBinary) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextBinary", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTextBinary indicates an expected call of SendTextBinary.
func (mr *MockTextBinarySenderMockRecorder) SendTextBinary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextBinary", reflect.TypeOf((*MockTextBinarySender)(nil).SendTextBinary), arg0)
}

// MockRemover is a mock of Remover interface.
type MockRemover struct {
	ctrl     *gomock.Controller
	recorder *MockRemoverMockRecorder
}

// MockRemoverMockRecorder is the mock recorder for MockRemover.
type MockRemoverMockRecorder struct {
	mock *MockRemover
}

// NewMockRemover creates a new mock instance.
func NewMockRemover(ctrl *gomock.Controller) *MockRemover {
	mock := &MockRemover{ctrl: ctrl}
	mock.recorder = &MockRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemover) EXPECT() *MockRemoverMockRecorder {
	return m.recorder
}

// RemoveBankCard mocks base method.
func (m *MockRemover) RemoveBankCard(arg0 string) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBankCard", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBankCard indicates an expected call of RemoveBankCard.
func (mr *MockRemoverMockRecorder) RemoveBankCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBankCard", reflect.TypeOf((*MockRemover)(nil).RemoveBankCard), arg0)
}

// RemoveLoginPassword mocks base method.
func (m *MockRemover) RemoveLoginPassword(arg0 string) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLoginPassword", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLoginPassword indicates an expected call of RemoveLoginPassword.
func (mr *MockRemoverMockRecorder) RemoveLoginPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLoginPassword", reflect.TypeOf((*MockRemover)(nil).RemoveLoginPassword), arg0)
}

// RemoveTextBinary mocks base method.
func (m *MockRemover) RemoveTextBinary(arg0 string) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTextBinary", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTextBinary indicates an expected call of RemoveTextBinary.
func (mr *MockRemoverMockRecorder) RemoveTextBinary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTextBinary", reflect.TypeOf((*MockRemover)(nil).RemoveTextBinary), arg0)
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthorizer) Login(arg0 modelstorage.RegisterLogin) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthorizerMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthorizer)(nil).Login), arg0)
}

// Register mocks base method.
func (m *MockAuthorizer) Register(arg0 modelstorage.RegisterLogin) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthorizerMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthorizer)(nil).Register), arg0)
}

// MockGRPCClient is a mock of GRPCClient interface.
type MockGRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCClientMockRecorder
}

// MockGRPCClientMockRecorder is the mock recorder for MockGRPCClient.
type MockGRPCClientMockRecorder struct {
	mock *MockGRPCClient
}

// NewMockGRPCClient creates a new mock instance.
func NewMockGRPCClient(ctrl *gomock.Controller) *MockGRPCClient {
	mock := &MockGRPCClient{ctrl: ctrl}
	mock.recorder = &MockGRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCClient) EXPECT() *MockGRPCClientMockRecorder {
	return m.recorder
}

// GetBankCards mocks base method.
func (m *MockGRPCClient) GetBankCards() (map[string]modelstorage.BankCard, codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCards")
	ret0, _ := ret[0].(map[string]modelstorage.BankCard)
	ret1, _ := ret[1].(codes.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBankCards indicates an expected call of GetBankCards.
func (mr *MockGRPCClientMockRecorder) GetBankCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCards", reflect.TypeOf((*MockGRPCClient)(nil).GetBankCards))
}

// GetLoginsPasswords mocks base method.
func (m *MockGRPCClient) GetLoginsPasswords() (map[string]modelstorage.LoginAndPassword, codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginsPasswords")
	ret0, _ := ret[0].(map[string]modelstorage.LoginAndPassword)
	ret1, _ := ret[1].(codes.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLoginsPasswords indicates an expected call of GetLoginsPasswords.
func (mr *MockGRPCClientMockRecorder) GetLoginsPasswords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginsPasswords", reflect.TypeOf((*MockGRPCClient)(nil).GetLoginsPasswords))
}

// GetTextsBinaries mocks base method.
func (m *MockGRPCClient) GetTextsBinaries() (map[string]modelstorage.TextOrBinary, codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextsBinaries")
	ret0, _ := ret[0].(map[string]modelstorage.TextOrBinary)
	ret1, _ := ret[1].(codes.Code)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTextsBinaries indicates an expected call of GetTextsBinaries.
func (mr *MockGRPCClientMockRecorder) GetTextsBinaries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextsBinaries", reflect.TypeOf((*MockGRPCClient)(nil).GetTextsBinaries))
}

// Login mocks base method.
func (m *MockGRPCClient) Login(arg0 modelstorage.RegisterLogin) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGRPCClientMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGRPCClient)(nil).Login), arg0)
}

// Register mocks base method.
func (m *MockGRPCClient) Register(arg0 modelstorage.RegisterLogin) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGRPCClientMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGRPCClient)(nil).Register), arg0)
}

// RemoveBankCard mocks base method.
func (m *MockGRPCClient) RemoveBankCard(arg0 string) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBankCard", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBankCard indicates an expected call of RemoveBankCard.
func (mr *MockGRPCClientMockRecorder) RemoveBankCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBankCard", reflect.TypeOf((*MockGRPCClient)(nil).RemoveBankCard), arg0)
}

// RemoveLoginPassword mocks base method.
func (m *MockGRPCClient) RemoveLoginPassword(arg0 string) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLoginPassword", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLoginPassword indicates an expected call of RemoveLoginPassword.
func (mr *MockGRPCClientMockRecorder) RemoveLoginPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLoginPassword", reflect.TypeOf((*MockGRPCClient)(nil).RemoveLoginPassword), arg0)
}

// RemoveTextBinary mocks base method.
func (m *MockGRPCClient) RemoveTextBinary(arg0 string) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTextBinary", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTextBinary indicates an expected call of RemoveTextBinary.
func (mr *MockGRPCClientMockRecorder) RemoveTextBinary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTextBinary", reflect.TypeOf((*MockGRPCClient)(nil).RemoveTextBinary), arg0)
}

// SendBankCard mocks base method.
func (m *MockGRPCClient) SendBankCard(arg0 modelstorage.BankCard) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBankCard", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBankCard indicates an expected call of SendBankCard.
func (mr *MockGRPCClientMockRecorder) SendBankCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBankCard", reflect.TypeOf((*MockGRPCClient)(nil).SendBankCard), arg0)
}

// SendLoginPassword mocks base method.
func (m *MockGRPCClient) SendLoginPassword(arg0 modelstorage.LoginAndPassword) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginPassword", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLoginPassword indicates an expected call of SendLoginPassword.
func (mr *MockGRPCClientMockRecorder) SendLoginPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginPassword", reflect.TypeOf((*MockGRPCClient)(nil).SendLoginPassword), arg0)
}

// SendTextBinary mocks base method.
func (m *MockGRPCClient) SendTextBinary(arg0 modelstorage.TextOrBinary) (codes.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextBinary", arg0)
	ret0, _ := ret[0].(codes.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTextBinary indicates an expected call of SendTextBinary.
func (mr *MockGRPCClientMockRecorder) SendTextBinary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextBinary", reflect.TypeOf((*MockGRPCClient)(nil).SendTextBinary), arg0)
}
